### PART One ###

### PRESET ###
$ sudo apt update
$ sudo apt upgrade


# Rename workers
# On the worker nodes, run

$ sudo hostnamectl set-hostname "worker1.dev.ops"   // 1st worker node
$ sudo hostnamectl set-hostname "worker2.dev.ops"   // 2nd worker node
$ exec bash

# Add the following entries in /etc/hosts file on each node

192.168.77.121  master1.dev.ops
192.168.77.122  worker1.dev.ops
192.168.77.123  worker2.dev.ops

# Disable swap & Add kernel Parameters
sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

#Load the following kernel modules on all the nodes,

$ sudo tee /etc/modules-load.d/containerd.conf <<EOF
overlay
br_netfilter
EOF
$ sudo modprobe overlay
$ sudo modprobe br_netfilter

# Set the following Kernel parameters for Kubernetes, run beneath tee command

$ sudo tee /etc/sysctl.d/kubernetes.conf <<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF 

# Reload the above changes, run

$ sudo sysctl --system

### SECOND-PART ###

# Install Containerd Runtime

$ sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates

# Enable docker repository

$ sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg
$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

# Now, run following apt command to install containerd

$ sudo apt update
$ sudo apt install -y containerd.io

# Configure containerd so that it starts using systemd as cgroup.

$ containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
$ sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

# Restart and enable containerd service

$ sudo systemctl restart containerd
$ sudo systemctl enable containerd
$ sudo systemctl status containerd

### THIRD PART ###
#Add Apt Repository for Kubernetes

$ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/kubernetes-xenial.gpg
$ sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"

### Note: At time of writing this guide, Xenial is the latest Kubernetes repository but when repository is available for Ubuntu 22.04 (Jammy Jellyfish) then you need replace xenial word with ‘jammy’ in ‘apt-add-repository’ command. ###

# Install Kubectl, Kubeadm and Kubelet

$ sudo apt update
$ sudo apt install -y kubelet kubeadm kubectl
$ sudo apt-mark hold kubelet kubeadm kubectl

# Join Worker Nodes to the Cluster
# On each worker node, use the kubeadm join command you noted down earlier after initializing the master node on lab 1 
# It should look something like this:

$ sudo kubeadm join k8smaster.example.net:6443 --token vt4ua6.wcma2y8pl4menxh2 \
   --discovery-token-ca-cert-hash sha256:0494aa7fc6ced8f8e7b20137ec0c5d2699dc5f8e616656932ff9173c94962a36

#  Check cluster status on master
$ kubectl get nodes
