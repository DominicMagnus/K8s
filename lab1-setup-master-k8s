### Prerequisites for lab ###
In this guide, we are using one master node and two worker nodes. Following are system requirements on each node,

Minimal install Ubuntu 22.04
Minimum 2GB RAM or more
Minimum 2 CPU cores / or 2 vCPU
20 GB free disk space on /var or more
Sudo user with admin rights
Internet connectivity on each node

### Lab Setup ###
Master Node:  192.168.77.121– master1.dev.ops
First Worker Node:  192.168.77.122 – worker1.dev.ops
Second Worker Node:  192.168.77.123 – worker2.dev.ops

### PRESET ###
$ sudo apt update
$ sudo apt upgrade

sudo hostnamectl set-hostname "master1.dev.ops"
exec bash


# Add the following entries in /etc/hosts file on each node

192.168.77.121  master1.dev.ops
192.168.77.122  worker1.dev.ops
192.168.77.123  worker2.dev.ops

# Disable swap & Add kernel Parameters

$ sudo swapoff -a

$ ### WRONG ###     sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab 

$ sudo sed -i '/\/swap.img/ s/^\(.*\)$/#\1/g' /etc/fstab

# or comment swap in config file
$ sudo nano /etc/fstab


#Load the following kernel modules on all the nodes,

$ sudo tee /etc/modules-load.d/containerd.conf <<EOF
overlay
br_netfilter
EOF
$ sudo modprobe overlay
$ sudo modprobe br_netfilter


# Set the following Kernel parameters for Kubernetes, run beneath tee command

$ sudo tee /etc/sysctl.d/kubernetes.conf <<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF 

# Reload the above changes, run

$ sudo sysctl --system

### SECOND-PART ###

# Install Containerd Runtime

$ sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates

# Enable docker repository

$ sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg
$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

# Now, run following apt command to install containerd

$ sudo apt update
$ sudo apt install -y containerd.io

# Configure containerd so that it starts using systemd as cgroup.

$ containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
$ sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

# Restart and enable containerd service

$ sudo systemctl restart containerd
$ sudo systemctl enable containerd
$ sudo systemctl status containerd

### THIRD PART ###
#Add Apt Repository for Kubernetes

$ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/kubernetes-xenial.gpg
$ sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"

### Note: At time of writing this guide, Xenial is the latest Kubernetes repository but when repository is available for Ubuntu 22.04 (Jammy Jellyfish) then you need replace xenial word with ‘jammy’ in ‘apt-add-repository’ command. ###

# Install Kubectl, Kubeadm and Kubelet

$ sudo apt update
$ sudo apt install -y kubelet kubeadm kubectl
$ sudo apt-mark hold kubelet kubeadm kubectl

# Initialize Kubernetes Cluster with Kubeadm

$ sudo kubeadm init --control-plane-endpoint=master1.dev.ops

# Right output: "Your Kubernetes control-plane has initialized successfully!"
# save all output to text file


# So, to start interacting with cluster, run following commands on the master node:

$ mkdir -p $HOME/.kube
$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
$ sudo chown $(id -u):$(id -g) $HOME/.kube/config

# next, try to run following kubectl commands to view cluster and node status

$ kubectl cluster-info
$ kubectl get nodes
